package main

import (
	"encoding/json"
	"fmt"
	"io/fs"
	"log"
	"os"
	"path/filepath"

	database "github.com/csye7125-su24-team05/webapp-cve-processor/app/db"
	"github.com/csye7125-su24-team05/webapp-cve-processor/app/helper"
	"github.com/csye7125-su24-team05/webapp-cve-processor/app/models"
)

func main() {
	fmt.Println("Hello, World!")
	updateDatabase()
	for{}
}

func updateDatabase() {

	db := database.CreateConnection()
	
	url := "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
	fmt.Println("Downloading file")
	err := helper.DownloadFile("cveList.zip", url)
	if err != nil {
		log.Fatalf("Error downloading file: %v", err)
		os.Exit(1)
	}
	fmt.Println("Downloaded file")

	err = helper.Unzip("cveList.zip", "cve-list")
	if err != nil {
		log.Fatalf("Error unzipping file: %v", err)
		os.Exit(1)
	}

	var cves []models.CVE
	processFiles(&cves)
	if len(cves) > 0 {
		fmt.Println("Saving to database")
		database.SaveToDB(cves, db)
	}

	fmt.Printf("Total CVEs: %+v", len(cves))
	// infinite loop
}

func processFiles(cves *[]models.CVE) {
	fmt.Println("Processing files")
	_ = filepath.Walk("cve-list", func(path string, info fs.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && filepath.Ext(path) == ".json" {
			cve, err := processFile(path)
			if err != nil {
				log.Printf("Error processing file %s: %v", path, err)
				return nil
			}
			*cves = append(*cves, cve)
		}
		return nil

	})
}

func processFile(path string) (models.CVE, error) {
	file, err := os.Open(path)
	if err != nil {
		return models.CVE{}, fmt.Errorf("error opening file %s: %v", path, err)
	}
	defer file.Close()

	var cveData map[string]interface{}
	if err := json.NewDecoder(file).Decode(&cveData); err != nil {
		return models.CVE{}, fmt.Errorf("error decoding JSON from file %s: %v", path, err)
	}
	if cveData == nil {
		return models.CVE{}, fmt.Errorf("no data found in file %s", path)
	}
	if cveMetadata, ok := cveData["cveMetadata"].(map[string]interface{}); ok {
		dateUpdated, ok := cveMetadata["dateUpdated"].(string)
		if !ok {
			dateUpdated = cveMetadata["datePublished"].(string)
		}
		cve := models.CVE{
			CveID:   cveMetadata["cveId"].(string),
			CveData: cveData,
			Version: dateUpdated,
		}
		return cve, nil
	}

	return models.CVE{}, fmt.Errorf("cveMetadata.version is missing or not in the expected format")

}