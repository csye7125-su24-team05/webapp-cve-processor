package main

import (
	"archive/zip"
	"fmt"
	"log"
	"os"

	"github.com/csye7125-su24-team05/webapp-cve-processor/app/helper"
	"github.com/csye7125-su24-team05/webapp-cve-processor/app/kafka"
)

func main() {
	fmt.Println("Hello, World!")
	cveEnabled := helper.GetEnvInt("CVE_PROCESSOR_ENABLED", 1)
	if cveEnabled > 0 {
		updateDatabase()
	} else {
		fmt.Println("CVE_PROCESSOR_ENABLED is set to 0, skipping database update")
		writeDummyData()
	}
	
}

func updateDatabase() {

	url := helper.GetEnv("CVE_URL", "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip")

	fmt.Println("Downloading file")
	err := helper.DownloadFile("cveList.zip", url)
	if err != nil {
		log.Fatalf("Error downloading file: %v", err)
		os.Exit(1)
	}
	fmt.Println("Downloaded file")

	err = UnzipAndStore("cveList.zip")
	if err != nil {
		log.Fatalf("Error unzipping file: %v", err)
		os.Exit(1)
	}
}

func writeDummyData() {
	kafkaObj := kafka.CreateKafkaConnection()
	fmt.Println("Writing dummy data")
	kafkaObj.WriteMessage("Dummy data")
}

func UnzipAndStore(src string) error {
	kafkaObj := kafka.CreateKafkaConnection()
	fmt.Println("Unzipping file")
	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer r.Close()
	for _, f := range r.File {
		if f.FileInfo().IsDir() {
			continue
		}

		rc, err := f.Open()
		if err != nil {
			return err
		}

		cve, err := helper.ProcessFile(rc)
		kafkaObj.WriteMessage(cve)
		
		rc.Close()
	}
	for {
		if kafkaObj.FailedMessages.Size() > 0 {
			fmt.Println("Retrying failed message")
			kafkaObj.WriteMessage(kafkaObj.FailedMessages.Dequeue())
		}
		if kafkaObj.FailedMessages.Size() == 0 {
			break
		}
	}
	return nil
}