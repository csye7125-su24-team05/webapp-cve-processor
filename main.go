package main

import (
	"archive/zip"
	"encoding/json"
	"fmt"
	"io"
	"io/fs"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"time"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type CVE struct {
	ID        uint                   `gorm:"primaryKey"`
	CveID     string                 `gorm:"column:cve_id;type:varchar(255);not null;index:idx_cve_id_version,unique"`
	CveData   map[string]interface{} `gorm:"column:cve_data;type:jsonb;not null"`
	Version   string                 `gorm:"column:version;not null;index:idx_cve_id_version,unique"`
	Timestamp time.Time              `gorm:"type:timestamp with time zone;default:current_timestamp"`
}

func (CVE) TableName() string {
	return "cve.cve_records"
}

func main() {
	fmt.Println("Hello, World!")
	updateDatabase()
}

func updateDatabase() {
	dbHost := os.Getenv("DB_HOST")
	dbUser := os.Getenv("DB_USER")
	dbPassword := os.Getenv("DB_PASSWORD")
	dbName := os.Getenv("DB_NAME")
	dbPort := os.Getenv("DB_PORT")

	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Asia/Kolkata", dbHost, dbUser, dbPassword, dbName, dbPort)	

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Error connecting to database: %v", err.Error())
		os.Exit(1)
	}
	
	url := "https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip"
	fmt.Println("Downloading file")
	err = downloadFile("cveList.zip", url)
	if err != nil {
		log.Fatalf("Error downloading file: %v", err)
		os.Exit(1)
	}
	fmt.Println("Downloaded file")

	err = unzip("cveList.zip", "cve-list")
	if err != nil {
		log.Fatalf("Error unzipping file: %v", err)
		os.Exit(1)
	}

	var cves []CVE
	processFiles(&cves)
	if len(cves) > 0 {
		fmt.Println("Saving to database")
		saveToDB(cves, db)
	}

	fmt.Printf("Total CVEs: %+v", len(cves))
}

func processFiles(cves *[]CVE) {
	_ = filepath.Walk("cve-list", func(path string, info fs.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && filepath.Ext(path) == ".json" {
			cve, err := processFile(path)
			if err != nil {
				log.Printf("Error processing file %s: %v", path, err)
				return nil
			}
			*cves = append(*cves, cve)
		}
		return nil

	})
}

func processFile(path string) (CVE, error) {
	file, err := os.Open(path)
	if err != nil {
		return CVE{}, fmt.Errorf("error opening file %s: %v", path, err)
	}
	defer file.Close()

	var cveData map[string]interface{}
	if err := json.NewDecoder(file).Decode(&cveData); err != nil {
		return CVE{}, fmt.Errorf("error decoding JSON from file %s: %v", path, err)
	}
	if cveData == nil {
		return CVE{}, fmt.Errorf("no data found in file %s", path)
	}
	if cveMetadata, ok := cveData["cveMetadata"].(map[string]interface{}); ok {
		dateUpdated, ok := cveMetadata["dateUpdated"].(string)
		if !ok {
			dateUpdated = cveMetadata["datePublished"].(string)
		}
		cve := CVE{
			CveID:   cveMetadata["cveId"].(string),
			CveData: cveData,
			Version: dateUpdated,
		}
		return cve, nil
	}

	return CVE{}, fmt.Errorf("cveMetadata.version is missing or not in the expected format")

}

func saveToDB(cves []CVE, db *gorm.DB) error {
	batchSize := GetEnvInt("BATCH_SIZE", 20)
	f, err := os.OpenFile("errors.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("failed to open error log file: %v", err)
	}
	defer f.Close()

	logger := log.New(f, "ERROR: ", log.Ldate|log.Ltime|log.Lshortfile)

	for i := 0; i < len(cves); i += batchSize {
		end := i + batchSize
		if end > len(cves) {
			end = len(cves)
		}
		batch := cves[i:end]
		if err := db.Clauses(clause.OnConflict{DoNothing: true}).Create(&batch).Error; err != nil {
			logger.Printf("Failed to insert batch start %v end %v: %v", i, end, err)
			return err
		}
		fmt.Printf("Saved batch start %v end %v\n", i, end)

	}
	return nil
}

func downloadFile(filepath string, url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

func unzip(src string, dest string) error {
	fmt.Println("Unzipping file")
	r, err := zip.OpenReader(src)
	if err != nil {
		return err
	}
	defer r.Close()

	for _, f := range r.File {
		fpath := filepath.Join(dest, f.Name)
		if f.FileInfo().IsDir() {
			os.MkdirAll(fpath, os.ModePerm)
			continue
		}

		if err = os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil {
			return err
		}

		outFile, err := os.OpenFile(fpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			return err
		}

		rc, err := f.Open()
		if err != nil {
			return err
		}

		_, err = io.Copy(outFile, rc)

		outFile.Close()
		rc.Close()

		if err != nil {
			return err
		}
	}
	return nil
}

func GetEnv(key string, defaultValue string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		return defaultValue
	}
	return value
}

func GetEnvInt(key string, defaultValue int) int {
	value, exists := os.LookupEnv(key)
	if !exists {
		return defaultValue
	}

	intVal, err := strconv.Atoi(value)
	if err != nil {
		log.Printf("Invalid value for %s: %s, using default %d", key, value, defaultValue)
		return defaultValue
	}
	return intVal
}
