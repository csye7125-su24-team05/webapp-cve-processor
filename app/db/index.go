package db

import (
	"fmt"
	"log"
	"os"

	"github.com/csye7125-su24-team05/webapp-cve-processor/app/models"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)


func CreateConnection() *gorm.DB {
	dbHost := os.Getenv("DB_HOST")
	dbUser := os.Getenv("DB_USER")
	dbPassword := os.Getenv("DB_PASSWORD")
	dbName := os.Getenv("DB_NAME")
	dbPort := os.Getenv("DB_PORT")

	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Asia/Kolkata", dbHost, dbUser, dbPassword, dbName, dbPort)	

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Error connecting to database: %v", err.Error())
		os.Exit(1)
	}

	return db
}

func SaveToDB(cves []models.CVE, db *gorm.DB) error {
	f, err := os.OpenFile("errors.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("failed to open error log file: %v", err)
	}
	defer f.Close()

	logger := log.New(f, "ERROR: ", log.Ldate|log.Ltime|log.Lshortfile)
	if err := db.Clauses(clause.OnConflict{DoNothing: true}).Create(cves).Error; err != nil {
		logger.Printf("Failed to insert records: %v", err)
		return err
	}

	return nil
}