package helper

import (
	"archive/zip"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	"github.com/csye7125-su24-team05/webapp-cve-processor/app/db"
	"github.com/csye7125-su24-team05/webapp-cve-processor/app/models"
	"gorm.io/gorm"
)

func DownloadFile(filepath string, url string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()


	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()


	_, err = io.Copy(out, resp.Body)
	return err
}

func UnzipAndStore(src string,  dbObj *gorm.DB) error {
	fmt.Println("Unzipping file")
	r, err := zip.OpenReader(src)
	batchSize := GetEnvInt("BATCH_SIZE", 20)
	if err != nil {
		return err
	}
	defer r.Close()
	var cveList []models.CVE
	for _, f := range r.File {
		if f.FileInfo().IsDir() {
			continue
		}

		rc, err := f.Open()
		if err != nil {
			return err
		}

		cve, err := processFile(rc)
		if err != nil {
			fmt.Printf("Error processing file %v: %v \n", f.Name, err)
			continue
		}
		// fmt.Printf("Successfully processed file %v \n", cve.CveID)
		cveList = append(cveList, cve)
		if len(cveList) >= batchSize {
			db.SaveToDB(cveList, dbObj)
			cveList = []models.CVE{}
		}
		rc.Close()
	}
	if len(cveList) > 0 {
		db.SaveToDB(cveList, dbObj)
	}
	return nil
}

func processFile(file io.ReadCloser) (models.CVE, error) {
	defer file.Close()
	var cveData map[string]interface{}
	if err := json.NewDecoder(file).Decode(&cveData); err != nil {
		return models.CVE{}, fmt.Errorf("error decoding JSON from file %v", err)
	}
	if cveData == nil {
		return models.CVE{}, fmt.Errorf("no data found in file")
	}
	if cveMetadata, ok := cveData["cveMetadata"].(map[string]interface{}); ok {
		dateUpdated, ok := cveMetadata["dateUpdated"].(string)
		if !ok {
			dateUpdated = cveMetadata["datePublished"].(string)
		}
		cve := models.CVE{
			CveID:   cveMetadata["cveId"].(string),
			CveData: cveData,
			Version: dateUpdated,
		}
		return cve, nil
	}

	return models.CVE{}, fmt.Errorf("cveMetadata.version is missing or not in the expected format")

}
